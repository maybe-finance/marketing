<%= tag.div class: [ "flex items-center gap-2", { "hidden": !index.zero? } ], data: { stocks_allocator_target: "allocation" } do %>
  <%= render partial: "shared/search_select", locals: {
        list: local_assigns[:list],
        label: local_assigns[:label],
        name: "stocks[]",
        required: local_assigns[:required],
        disabled: !local_assigns[:required],
        placeholder: "Search for a stock",
        custom_filter_value: "prioritizeTickerFilter"
      } %>

  <div class="relative w-16">
    <%= tag.input type: :number, min: 0, max: 100, step: 1,
          name: "stock_allocations[]",
          class: "form-field w-[68px] text-left rounded-[10px] h-9 shadow-xs text-sm !appearance-none",
          required: local_assigns[:required], disabled: !local_assigns[:required],
          placeholder: 0,
          data: { action: "input->stocks-allocator#updateAllocation" } %>
    <span class="absolute inset-y-0 right-2 flex items-center pointer-events-none text-gray-500 text-xs">%</span>
  </div>

  <div class="flex flex-col items-center justify-between gap-1">
    <button type="button" data-action="click->stocks-allocator#removeStockSelector" class="flex justify-center p-[2px] items-center w-[16px] h-[16px] bg-white border border-black/10 rounded-[7px] text-gray-500 shadow-xs">
      <%= lucide_icon "minus", class: "stroke-[3px]" %>
    </button>
    <button type="button" data-action="click->stocks-allocator#addStockSelector" class="flex justify-center p-[2px] items-center w-[16px] h-[16px] bg-white border border-black/10 rounded-[7px] text-gray-500 shadow-xs">
      <%= lucide_icon "plus", class: "stroke-[3px]" %>
    </button>
  </div>
<% end %>


<script>
window.prioritizeTickerFilter = function(dataList, filterValue) {
  return dataList
    .filter(item => {
      return item.value.toLowerCase().includes(filterValue) ||
             item.name.toLowerCase().includes(filterValue);
    })
    .sort((a, b) => {
      const aStartsWithFilter = a.value.toLowerCase().startsWith(filterValue);
      const bStartsWithFilter = b.value.toLowerCase().startsWith(filterValue);
      if (aStartsWithFilter && !bStartsWithFilter) return -1;
      if (!aStartsWithFilter && bStartsWithFilter) return 1;
      return 0;
    });
};
</script>
